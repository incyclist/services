import { LatLng } from "../../utils/geo"

/*
export type MapAreaProps = {
    onLoaded: 
    if (props.minWays) this.minWays = props.minWays;
    if (props.maxWays) this.maxWays = props.maxWays;
    if (props.radius) this.radius =  props.radius;
    if (props.filter) this.filter = props.filter;
    
    if (props.location) {

}
*/
export type Boundary = {
    southwest: LatLng
    northeast: LatLng
}

export interface CrossingInfo extends LatLng {
    distance:number
}

export type OverpassElementType = 'way' | 'node'

export type OverpassTags = {}

export type OverpassBounds = {
    minlat:number, 
    minlon: number,
    maxlat: number,
    maxlon: number
}

export type OverpassElement = {
    type: OverpassElementType
    id: number,
    tags?: Record<string,string>
    lat?:number,
    lon?:number

}

export interface OverpassNode extends OverpassElement {
    type:'node'
}
export interface OverpassWay extends OverpassElement {
    type: 'way'
    bounds: OverpassBounds              
    nodes?: Array<number>
    geometry?: Array<{lat:number, lon:number}>

}

export type OverpassResult = {
    version: number
    generator?: string
    elements?: Array<OverpassElement>
    
}

export type IncyclistNode = {
    id: string,
    lat: number,
    lng: number,
    ways?: Array<string>
    tags?: Record<string,string>
    
}


export type FreeRideDataSet = {
    nodesLookup: Record<string, IncyclistNode>
    ways: Array<IncyclistWay>
    waysLookup: Record<string, IncyclistWay>
    typeStats: Record<string,number>
}

export type IncyclistWay = { 
    id:string,
    path:Array<IncyclistNode>
    type:string, 
    name:string, 
    tags: Record<string,string>, 
    bounds:OverpassBounds

    onewayReverse?:boolean
    originalId?:string
}

export type PartialWay = {
    id: string,
    path: Array<IncyclistNode>
}

export type IncyclistWaySplit = {
    way: PartialWay
    branches: Array<PartialWay>
}

export type SplitPointInfo = {
    point:IncyclistNode,
    idx:number,
    branches: Array<string>
}

export type WaySplitInfo = {
    id:string
    path: Array<IncyclistNode>
    onewayReverse?:boolean
}