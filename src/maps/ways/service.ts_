import { EventLogger } from "gd-eventlog";
import { OverpassApi } from "../../api";
import clone from "../../utils/clone";
import { buildQuery,generateID, getBounds, getFirstBranch, getUntilFirstBranch, isAllowed, isOneWay, isRoundabout, isWithinBoundary, parseMapData, pointEquals, removeDuplicates, splitAtPoint, splitAtPointInfo } from "./utils";
import { LatLng } from "../../utils/geo";
import { Boundary, FreeRideDataSet, IncyclistWaySplit, IncyclistWay, IncyclistNode } from "./types";
import { DEFAULT_MIN_WAYS, DEFAULT_MAX_WAYS, DEFAULT_RADIUS, GET_WAYS_IN_AREA, MAX_DISTANCE_FROM_PATH } from "./consts";


export class MapAreaService {

    protected static consts = { DEFAULT_RADIUS,DEFAULT_MIN_WAYS,DEFAULT_MAX_WAYS,MAX_DISTANCE_FROM_PATH,GET_WAYS_IN_AREA }

    protected static _instances = {}

    static getInstance(id='default') {        

        if (!MapAreaService._instances[id])
            MapAreaService._instances[id] = new MapAreaService()

        return MapAreaService._instances[id]
    }

    protected overpass:OverpassApi
    protected logger:EventLogger
    protected minWays: number
    protected maxWays: number
    protected radius: number
    protected data: FreeRideDataSet
    protected boundary: Boundary
    protected location:IncyclistNode
    protected query:string
    protected queryLocation:IncyclistNode
    protected openmapData: JSON|string
    protected loaded: 'success' | 'failure' |'unknown' = 'unknown'
    protected filter


    constructor ( props?) {

        this.overpass = new OverpassApi();
        this.logger = new EventLogger('MapArea')
        this.init(props)
    }




    setLocation( location, reload, onLoaded ) {
        this.location = location;
        if (location === undefined) {
            if (onLoaded)
                onLoaded('failure', this.data.ways, this.openmapData)
            return;
        }
            

        if (reload) {
            this.boundary =  getBounds(this.location.lat,this.location.lng,this.radius);  
            this.load(onLoaded);    
        }
        else {
            
            if (onLoaded)
                onLoaded('success', this.data.ways, this.openmapData)
        }
        
    }
    

    splitAtFirstBranch(way:IncyclistWay):IncyclistWaySplit {
        if (way===undefined || way.path===undefined)
            return;

        let result:IncyclistWaySplit = {
            way: {id:way.id, path:[]} ,
            branches: []
        }
        
        try {
    
            let pointInfo = getFirstBranch(way);
            if (pointInfo!==undefined) {
    
                let paths = splitAtPointInfo(way,pointInfo);
                result.way.path = paths[0];
    
                let branch= {id:way.id,path : paths[1]};
                if (branch.path.length>1)
                    result.branches.push(branch);
        
                pointInfo.point.ways.forEach( (wid)=>{
                    let w = clone(this.data.waysLookup[wid]);
                    if ( w!==undefined && w.id!==way.id) {
                        // crossing is first point of branch
                        if (w.path[0].id === pointInfo.point.id) {
                            branch = getUntilFirstBranch(w,{ignore:way.id})
                            if (branch.path.length>1)
                                result.branches.push(branch);
    
                        }
                        // crossing is last point of branch
                        else if (w.path[w.path.length-1].id===pointInfo.point.id) {
                            w.path.reverse();
                            branch = getUntilFirstBranch(w,{ignore:way.id})
                            if (branch.path.length>1)
                                result.branches.push(branch);
                        }
                        else { // crossing somwhere in the middle 
                            let branches = splitAtPoint(w,pointInfo.point)
    
                            branch = getUntilFirstBranch(branches[0],{ignore:way.id})
                            if (branch.path.length>1)
                                result.branches.push(branch);
    
                            branch = getUntilFirstBranch(branches[1],{ignore:way.id})
                            if (branch.path.length>1)
                                result.branches.push(branch);                        
    
                        }
                    }
                })
        
            }
            else {
                result.way.path = [...way.path];
            }
    
        }
        catch ( error) {
            this.logger.logEvent( {message: 'error', fn:'splitAtFirstBranch()',way, error:error.message, stack:error.stack})
            result = undefined;
        }

        //console.log('splitAtFirstBranch',way,'=>',result)
        return result
    }



    getNextOptions( way?:IncyclistWay, way1:IncyclistWay=undefined, reload:boolean=false, props?:{mapReload:boolean} ) {
        return new Promise ( (resolve,reject) => {
        
            if (way===undefined || way.id===undefined || way.path===undefined || way.path.length<1) 
                return reject ( {retry:false, message:'invalid arguments'} );

            let location = way.path[way.path.length-1];
            if (location.id===undefined) {
                if (way.path.length>1)
                    location = way.path[way.path.length-2];
                else {
                    return resolve([])
                }
            }

            let currentWay = {w:way,roundabout:false};
            if ( way.path[0].id===undefined) {
                currentWay = this.copyWay(way);
            }

            if (props && props.mapReload===false) {
                resolve( this._getNextOptions( location, currentWay,way1) );
            }
            else {
                this.setLocation(location, reload,  (status,ways,data) => {
                    if ( status!=='success') {
                        reject( { retry:true, code:1 ,  message:'could not load data'} )
                    }
                    resolve( this._getNextOptions( location, currentWay,way1) );
                });    

            }

    
        })

    }
    
    isWithinBoundary( location:LatLng):boolean {
        return isWithinBoundary(location, this.boundary)
    }

    protected init(props) {
        this.minWays    = DEFAULT_MIN_WAYS;
        this.maxWays    = DEFAULT_MAX_WAYS;
        this.radius     = DEFAULT_RADIUS;
        this.data = undefined;

        if ( props===undefined) 
            return;
        
        if (props.onLoaded) this.onLoaded = props.onLoaded;
        if (props.minWays) this.minWays = props.minWays;
        if (props.maxWays) this.maxWays = props.maxWays;
        if (props.radius) this.radius =  props.radius;
        if (props.filter) this.filter = props.filter;
        
        if (props.location) {
            this.setLocation( props.location, true,this.onLoaded)
        }
    }


    protected async load( callback ) {

        const onLoaded = callback ? callback : this.onLoaded;
        let ts,ts1;
        
        try {                       
            this.query = buildQuery(GET_WAYS_IN_AREA,this.boundary);
            this.queryLocation = this.location;
            const {id,lat,lng} = this.location;
            this.logger.logEvent({message:'overpass query',query:this.query,location:{id,lat,lng}, radius:this.radius});

            ts = Date.now();
            let openmapData = await this.overpass.query(this.query);      
            ts1 = Date.now();
            
            
            this.logger.logEvent({message:'overpass query result',status:'success',duration:(ts1-ts)});
            this.setData(openmapData,onLoaded);            
        }
        catch (error) {
            ts1 = Date.now();
            this.logger.logEvent({message:'overpass query result',status:'failure',error:{code:error.code,response:error.response},duration:(ts1-ts)});

            if (onLoaded!==undefined)
                onLoaded('failure', this.data?.ways, this.openmapData)
        }
    }




    protected setData( openmapData,callback) {
        const onLoaded = callback ? callback : this.onLoaded;

        let ts = Date.now();
        this.data = parseMapData(openmapData,this.filter); 
        let ts1 = Date.now(); 

        /* istanbul ignore next */ 
        this.logger.logEvent({message:'Parse',duration:(ts1-ts),
                                ways:this.data?.ways.length??0,
                                nodes:Object.keys(this.data?.nodesLookup??{}).length,
                                typeStats:this.data?.typeStats
                            });

        if (this.data!==undefined) {
            this.openmapData = openmapData;                        
            this.checkRoundabouts();
            this.loaded = 'success';


            if ( this.data?.ways.length<this.minWays) {
                if (this.data?.ways.length>0) {
                   let gap = this.minWays/this.data?.ways.length;
                   this.radius = this.radius*Math.sqrt(gap);
                }
                else {
                    this.radius = this.radius*2;
                }
            }
            else if ( this.data?.ways.length>this.maxWays) {
               let gap = this.data?.ways.length/this.maxWays;
               this.radius = this.radius/Math.sqrt(gap);
            }

        }
        else {
            this.loaded = 'failure'
        }
        
    

        if (onLoaded!==undefined) {
            onLoaded(this.loaded, this.data?.ways,this.openmapData);
        }

    }


    protected _getNextOptions( loc, way,way1) {
        let location = this.getNode(loc);
        let options = [];

        if (location!==undefined ) {
            location.ways.forEach( (wid,idx) => {
                if ( wid===way.id) {
                    this.checkOptionsOnCurrentWay(location,way,options)           
                }
                else if ( way1!==undefined  && wid===way1.id) {
                    //ignore
                }
                else {
                    let w = this.getWay(wid);
                    options = this.checkOptionsOnDifferentWay(location,w,options)         
                }
            })
                
        }

        return options;        
    }

    /* Collects all ways that are belonging to the same roundabout into an array
    * @param {MapArea.way} way to be evaluated
    * @returns {MapAreay.String[]} Array containing all IDs of ways that belong to this roundabout
    */
    protected collectRoundabout   (way)  {
        if (!isRoundabout(way,true))
            return undefined;
            
        const contains = (ways,wid) => {
            let found =  ways.find( id=> id===wid);
            return found!==undefined;
        }

        const addNodes = ( ways,way) => {
            way.path.forEach( (n,idx) => {
                if (idx>0) {
                    n.ways.forEach( wid => {
                        let w = this.data?.waysLookup[wid];
                        if ( isRoundabout(w,true) && wid!==way.id && !contains(ways,wid)) {
                            ways.push(wid);
                            addNodes(ways,w)
                        }
                    });    
                }
            })    
        }

        let ways = [way.id];
        addNodes(ways,way);
        return ways;
    };
    
    /* replaces the ID of a given way 
    * @param {MapAreay.way} way 
    * @param {String} newId 
    * @param {boolean} replaceLookup defines if the waysLookup entry should be replace 
    */
    protected replaceWayID   (way:IncyclistWay,newId:string,replaceLookup:boolean=true):IncyclistWay  {
        if (way===undefined || newId===undefined || way.id===undefined || way.path===undefined || !this.data) return;

        let oldId = way.id;
        let w = this.data?.waysLookup[oldId];
        
        
        w.originalId = w.id;
        w.id = newId;
        w.path.forEach( (nx,j) => {
            w.path[j] = this.data?.nodesLookup[nx.id];
            let n = w.path[j];
            n.ways.forEach( (wid,i) => { if (wid===oldId) n.ways[i] = newId })
            // remove duplicates
            n.ways = [ ...new Set(n.ways)]
        })

        if(replaceLookup)
            this.data.waysLookup[newId] = w;
        delete this.data.waysLookup[oldId];
        return w;
    };

    protected checkRoundabouts():void {
        let roundaboutsStrict = [];
        let roundaboutsImplicit = [];
       

        try {
            // retrieve all roundabouts
            this.data?.ways.forEach( way => {
                if ( isRoundabout(way,true) ) {
                    let ways = this.collectRoundabout(way);
                    let id = generateID(ways);
                    let found =  roundaboutsStrict.find( e => e.id===id)
                    if (!found) {
                        found = (way.path[0].id===way.path[way.path.length-1].id);
                        if (found) {
                            roundaboutsImplicit.push(way);
                        }
                    }
                    if (!found) roundaboutsStrict.push( {id,ways})
                }
                else if  (isRoundabout(way,false)) {
                    roundaboutsImplicit.push(way);
                }
            } )
            this.logger.debug('_checkRoundabouts: found roundabouts:',roundaboutsStrict)
            roundaboutsStrict.forEach( ri => {
                let originalNodes = [];

                // 1st pass: collect nodes
                ri.ways.forEach( (wid,i) => {
                    let way = this.data?.waysLookup[wid];
                    let path = way.path;
                    path.forEach( n => {
                        if ( originalNodes.length===0 ||
                                originalNodes[originalNodes.length-1]!==n.id)
                            originalNodes.push(n.id)                    
                    })
                })

                // 2nd pass: replace way IDs and collect original Ways
                ri.ways.forEach( (wid,i) => {
                    let way = this.data?.waysLookup[wid];
                    this.replaceWayID(way,ri.id,i===0) 
                })

                // 3nd pass: combine nodes
                let roundabout = this.data?.waysLookup[ri.id];
                roundabout.path = [];
                originalNodes.forEach( nid => {
                    let node = this.data?.nodesLookup[nid];
                    roundabout.path.push(node);
                })

                roundabout.tags.roundabout = 'yes';
            })    

            roundaboutsImplicit.forEach( roundabout => {
                if ( roundabout.tags===undefined)
                    roundabout.tags = {}
                roundabout.tags.roundabout = 'yes';
            })
                

        }
        catch (error) {
            this.logger.logEvent({message:'Error',error});
        }
        
    }

    protected getWay( props:string|IncyclistWay):IncyclistWay {
        if (!props) return;

        if ( typeof props === 'string') {
            return clone(this.data?.waysLookup[props])
        }
        if ( props.id !==undefined)
            return clone(this.data?.waysLookup[props.id]);
    }

    protected getNode( props?:string|IncyclistNode):IncyclistNode {
        if (!props) return this.location;

        if ( typeof props === 'string') {
            return clone(this.data?.nodesLookup[props])
        }
        if ( typeof props === 'object' && props.id===undefined && props.lat!==undefined && props.lng!==undefined && props.ways!==undefined) {
            return clone(props)
        }
        if ( props.id !==undefined) {
            return clone(this.data?.nodesLookup[props.id]);
        }
    }

    protected copyWay(wayFrom:IncyclistWay,id?:string): {w:IncyclistWay, roundabout:boolean}  {

        let w;
        w= (id===undefined) ?   this.getWay(wayFrom) : this.getWay(id);
        
        let path=w.path;
        let roundabout = isRoundabout(w);
    
        if ( !roundabout && wayFrom!==undefined && wayFrom.id===w.id){
            let idxPrev = undefined;
            let idx = undefined;
            let point = wayFrom.path[wayFrom.path.length-1];
            let prev = wayFrom.path[wayFrom.path.length-2];
    
            path.forEach( (p,i)=> {
                if (idx===undefined || idxPrev===undefined) {                    
                    if (pointEquals(p,point))   idx = i;
                    if (pointEquals(p,prev))    idxPrev = i;
                }
            });
            if (idx!==undefined && idxPrev!==undefined) {                    
                if ( idxPrev<idx) w.path = path.filter( (n,i) => i>=idx )
                if ( idxPrev>idx) { 
                    w.path = path.filter( (n,i) => i<=idx )
                    w.path.reverse();
                }
            }
        }
    
        return {w,roundabout};
    }

    protected checkOptionsOnCurrentWay(location:IncyclistNode,way:IncyclistWay,options) {
        try {
            if ( way.path.length>1) {
                let prev = way.path[way.path.length-2];
                let {w,roundabout} = this.copyWay(way)
                if (roundabout) {
                    let branches = splitAtPoint(w,location);
                    branches.forEach ( b => {
                        if (b.path.length>1 && b.path[1].id !== prev.id) {
                            options.push(b)
                        }

                    })    
                }
                else {
                    if ( w.path.length>1) {
                        let result = this.splitAtFirstBranch(w);
                        options.push(result.way);
                    }

                }

            }
        }
        catch (e) {
            console.log(e)
        }

    }

    protected checkOptionsOnDifferentWay(location,w,options) {
        if (!w || !w.path || !location) return;

        let result;
        let roundabout = isRoundabout(w);
        let self = this;
        
        if (!roundabout) {
            if (w.path[0].id===location.id ) {
                result = this.splitAtFirstBranch(w);
                let expand = false;

                // no crossing before end of path
                if ( result.way.path.length === w.path.length) {
                    const pLast = w.path[ w.path.length-1];
                    if ( pLast.ways.length===2 ) {
                        const wIdNext = pLast.ways.find( wid => wid!==w.id )
                        const wNext = this.getWay({id:wIdNext}) 
                        if (!isRoundabout(wNext)) {
                            
                            // if we are at the beginning or end of the next way
                            const pNextStart = wNext.path[0];
                            const pNextEnd = wNext.path[ wNext.path.length-1];
                            if ( pNextStart.id===pLast.id   ) {
                                expand = true;
                                const segment = this.splitAtFirstBranch(wNext)
                                const combined  = { 
                                    id: segment.way.id,
                                    path: w.path.concat( segment.way.path.slice(1) )
                                }
                                options.push(combined)
                            }
                            else if ( pNextEnd.id===pLast.id ) {
                                const wReverse = this.copyWay(wNext);
                                if (wReverse && wReverse.path ) {
                                    wReverse.path = wReverse.path.reverse();
                                    const segment = this.splitAtFirstBranch(wNext)
                                    const combined  = { 
                                        id: segment.way.id,
                                        path: w.path.concat( segment.way.path.slice(1) )
                                    }
                                    options.push(combined)
                                }
                                else {
                                    console.log(' ~~~~ unexpected', wNext, wReverse)
                                }
                            }
                            else { // we are in the middle of the next way
                                const idxSplit = wNext.path.findIndex( (p) => p.id===pLast.id );
                                if (idxSplit!==1) {
                                    const nextPaths = splitAtIndex( wNext, idxSplit);
                                    nextPaths.forEach( (p) => {   
                                        

                                        if ( p[0].ways.find( wid => wid===w.id )) {
                                            expand = true;

                                            const wFull = {
                                                id: wIdNext,
                                                path: p.slice(1)
                                            }
                                            const segment = this.splitAtFirstBranch(wFull);
                                            const combined  = {
                                                id: segment.way.id,
                                                path: w.path.concat( segment.way.path.slice(1) )                                                
                                            }

                                            options.push(combined)
                                        }
                                        else if ( p[p.length-1].ways.find( wid => wid===w.id )) {
                                            expand = true;
                                            
                                            const wFull = {
                                                id: wIdNext,
                                                path: p.reverse()
                                            }
                                            const segment = this.splitAtFirstBranch(wFull);

                                            const combined  = {
                                                id: segment.way.id,
                                                path: w.path.concat( segment.way.path.slice(1) )                                                
                                            }
                                            options.push(combined)
                                        }
                                    })
                                }


                            
                            }

                        }
                    }

                }

                if (!expand)
                    options.push(result.way);
                
            }
            else if (w.path[w.path.length-1].id===location.id) {
                w.path.reverse();
                result = this.splitAtFirstBranch(w);
                
                if ( isOneWay(w))
                    result.way.onewayReverse = true;
                options.push(result.way);
            }
            else {
                let ways = splitAtPoint(w,location);
                if ( !ways[0].onewayReverse ) {
                    result = this.splitAtFirstBranch(ways[0]);
                    options.push(result.way);
                }
                if ( !ways[1].onewayReverse ) {
                    result = this.splitAtFirstBranch(ways[1]);
                    options.push(result.way);
                }
            }    
        }
        else {
            let r =  splitAtPoint(w,location);
            if (!r || r.length===0)
                return;

            let path=[];
            
            r[0].path.forEach( (p,idx) => {

                if (idx===0) {
                    path.push(p);    
                    return;                                    
                }

                if (p.ways.length>1) {
                    p.ways.forEach ( owid => {
                        if (owid!==w.id) {
                            let ow = clone(this.waysLookup[owid]);
                            if (ow!==undefined) {
                                if ( !isAllowed(ow,p)) 
                                    return;

                                if ( ow.path[ow.path.length-1].id === p.id)
                                    ow.path.reverse();
                                let optPath1 =  self.splitAtFirstBranch(ow);
                                let optPath  = [...path];
                                optPath.push(...optPath1.way.path)
                                let o = {
                                    roundabout:w.id,
                                    id: ow.id,
                                    path: optPath
                                }
                                    options.push(o);    
                            }

                        }

                    }) 
                }
                path.push(p);  
            })
        }

        return removeDuplicates(options);
        /*
        if ( result.branches.length===1) {
            append( result.way.path, result.branches[0].path,'after' )
        }
        */

    }



    

}



export const useMapArea = (id) => MapAreaService.getInstance(id)