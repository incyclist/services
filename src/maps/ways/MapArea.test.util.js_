import fs from 'fs';
import crypto from 'crypto'
import MapArea from './MapArea'

function _decodePath(path,offset) {
    if (offset===undefined  || offset===0)
        return path.map( v=>v.id ).join(',');
    
    let p = [];
    let l = path.length;
    if (offset>0) {
        path.forEach( (e,i)  => { if (i<offset) p.push(e)} );
    }
    else {
        path.forEach( (e,i)  => { if (i>=(l+offset)) p.push(e)} );
    }
    return p.map( v=>v.id ).join(',');

}

function _decodeOption(option) {
    return _decodePath(option.path,2)+'...'+_decodePath(option.path,-2)    
} 


const createHash = x => crypto.createHash('sha1').update(x, 'utf8').digest('hex');
const hashes = [];

export function _setLocation(props) {
    if ( props===undefined) props = {}

    let onLoaded = props.onLoaded;
    let filename = props.filename;
    let test = props.test;
    const location = props.location;
    let radius = props.radius 
    let exists = false;
    let mapData;
    let a = props.map;
    let filter = props.filter;

    if ( radius===undefined) 
        radius = (a!==undefined) ? a.radius : MapArea.consts.DEFAULT_RADIUS;

    return new Promise ( (resolve,reject) => {

        
        if ( filename===undefined && location!==undefined) {
            const info = { location,radius }
            const query = MapArea._generateQuery(location,radius);
            const hash = createHash(query);
    
            if (hashes[hash]!==undefined) {
                filename = hashes[hash].filename;
            }
            else {
    
                if ( test===undefined) 
                    filename = `./__testdata__/mapArea/${hash}.json`
                else 
                    filename = `./__testdata__/mapArea/${test}-${hash}.json`
        
                hashes[hash] = { info, filename}
            }
    
        }
    
        try {
            exists = fs.existsSync(filename);

            if (a===undefined)
                a = new MapArea({radius,filter})

            if (!exists) { 
                // reset mocks - we need to do a real call
                if ( a.loadFn!==undefined) {
                    a.load = a.loadFn;
                }
                if (a.setLocationFn!==undefined )
                    a.setLocation = a.setLocationFn

                if (a.setLocationFn===undefined) a.setLocationFn = a.setLocation.bind(a)
            }
    
            else {
                mapData =  fs.readFileSync(filename,'UTF-8');
                
                if (a.setLocationFn===undefined) a.setLocationFn = a.setLocation.bind(a)
                if (a.loadFn===undefined) a.loadFn = a.load.bind(a);

                a.load = jest.fn( (cb)=>a.setData(mapData,cb) );
                a.setLocation = jest.fn(  ( loc, reload, cb ) => {
                    if (reload)
                        _setLocation( {location:loc,onLoaded:cb,test,map:a })
                    else {
                        if (cb) cb( 'success', a.ways, a.openmapData)
                    }
                })

            }
    
        }
        catch ( err) {
            exists = false;
        }
    
        if ( location!==undefined) {
            
            a.setLocationFn( location, true, (status,ways,data) => {
                if ( !exists) {
                    const {lat,lng} = location;
                    a.openmapData.location = {lat,lng};
                    a.openmapData.radius = radius;
                    a.openmapData.query = MapArea._generateQuery(location,radius);
                    a.openmapData.cntWays = a.ways.length;
                    
                    fs.writeFileSync(filename,JSON.stringify(data,null,2));
                    console.log( `added ${lat},${lng},${radius}:${filename}`)

                    a.setLocation = jest.fn(  ( loc, reload, cb ) => {
                        if (reload)
                            _setLocation( {location:loc,onLoaded:cb,test,map:a })
                        else {
                            if (cb) cb( 'success', a.ways, a.openmapData)
                        }
                    })
    
                }
    
    
                if ( onLoaded) {
                    onLoaded(status,ways,data)
                }
    
                resolve(a)
            } )    
        }
        else {
            a.setLocation = jest.fn(  ( loc, reload, cb ) => {
                if (reload)
                    _setLocation( {location:loc,onLoaded:cb,test,map:a })
                else {
                    if (cb) cb( 'success', a.ways, a.openmapData)
                }
            })
            resolve(a)
        }
        
    })
    
}

export default class MapAreaUtils {
    static decodePath(path,offset) { return _decodePath(path,offset) }
    static decodeOption(option) { return _decodeOption(option) }    
    static setLocation(props) { return _setLocation(props)}
}