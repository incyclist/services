import { addVideoSpeed } from './utils';

const getValue = (data,name) => {
    if (!data.hasOwnProperty(name) || !Array.isArray(data[name])) {
        return undefined;
    }

    const v = data[name][0];
    if (v===undefined) 
        return undefined;
    
    if (v.hasOwnProperty('$'))
        return v._;
    else
        return v;
}
    


export default async function ImportBikeLab( data ) {

    let route = {};


    route.title = getValue(data,'Description') || getValue(data,'Name');
    route.localizedTitle = getValue(data,'Description') || getValue(data,'Name');
    route.country = getValue(data,'CountryCode');
    route.distance = 0.0;
    route.decoded = [];
    route.elevation = 0;
    route.author = undefined;
    route.private = true;  
    route.routeId = getValue(data,'id');

    if(data.AltitudePoints===undefined || data.AltitudePoints[0]==='' ||data.AltitudePoints[0].AltitudePoint===undefined)
        route.gpxDisabled = true;

    if (!route.gpxDisabled ) {
        let positions = data.AltitudePoints[0].AltitudePoint.map(p=>p.$)
        route.decoded = positions.map(p=>({ 
            lat:Number(p.Lat),
            lng:Number(p.Lng),
            routeDistance:Number(p.Distance),
            elevation:Number(p.Alt)
        }))    
    }

    route.video = {}
    route.video.file = getValue(data,'Video');
    route.video.next = getValue(data,'next-video');


    const fileParts = route.video.file.split('.');
    const extension = fileParts[fileParts.length-1];            
    if (extension.toLowerCase()==='mp4') {
        route.video.format = 'mp4';
    }

    
    if ( data.VideoPoints && data.VideoPoints[0]  && data.VideoPoints[0]!=='' && data.VideoPoints[0].VideoPoint ) {
        const mappings = data.VideoPoints[0].VideoPoint.map(m=>m.$);

        let prev=undefined;
        route.video.mappings = mappings.map( m => {
            const mapping = {
                time:Number(m.VideoTime),
                distance:Number(m.Distance),
                
            }
            if (prev && prev.time!==undefined && prev.distance!==undefined)
                mapping.videoSpeed  = (mapping.distance-prev.distance) / (mapping.time - prev.time) * 3.6;
            prev = mapping;
            return mapping;
        });

        // add video speed data
        addVideoSpeed(route);
         
    }


    return route;
}
