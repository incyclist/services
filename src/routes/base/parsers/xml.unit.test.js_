import XMLParser,{ ImportXML} from "./xml";

import fs from 'fs';
import Route from "../../../../../ergo-react/src/models/route/route";

async function loadFile(type,fileName) {
    return new Promise( (resolve,reject) => {
        fs.readFile(fileName,type, (err,data) => {
            if (err) 
                return reject(err);
            return resolve(data);
        });
    });
};

describe( 'xml',()=>{
    describe ('ImportGPX', () => {

        test('Arnbach',async ()=> {
            let fileName = './src/__tests__/testdata/rlv/DE_Arnbach.xml';
        
            let data = await loadFile('utf-8',fileName);
            let route = await ImportXML(data);
            expect(route.video.mappings[0].time).toBe(0);
            expect(route.video.mappings[0].distance).toBe(0);
            expect(route).toMatchSnapshot()
            // TODO: add tests
    
        });


        test('schweighofen',async ()=> {
            let fileName = './src/__tests__/testdata/rlv/DE_Schweighofen.xml';
        
            let data = await loadFile('utf-8',fileName);
            let routeData = await ImportXML(data);

            const route = new Route( {data:routeData})
            route.validate()

            let points = route.getPoints();
            let csv = points.map( (p,idx)=> `${idx},${p.routeDistance},${p.elevation},${p.lat},${p.lng},${p.slope}`).join('\n');

            expect(routeData.video.mappings[0].time).toBe(0);
            expect(routeData.video.mappings[0].distance).toBe(0);
            expect(csv).toMatchSnapshot();
            // TODO: add tests
    
        });

        test('BikeLab:Randa',async ()=> {
            let fileName = './src/__tests__/testdata/rlv/Randa.xml';
        
            let data = await loadFile('utf-8',fileName);
            let routeData = await ImportXML(data);

            const route = new Route( {data:routeData})
            route.validate()

            let points = route.getPoints();
            let csv = points.map( (p,idx)=> `${idx},${p.routeDistance},${p.elevation},${p.lat},${p.lng},${p.slope}`).join('\n');

            expect(csv).toMatchSnapshot();
            // TODO: add tests
    
        });


        test('bug: missing positions tag ',async ()=> {
            let fileName = './src/__tests__/testdata/rlv/ES_SaCalobra.xml';
        
            let data = await loadFile('utf-8',fileName);
            let routeData = await ImportXML(data);

            const route = new Route( {data:routeData})
            route.validate()

            let points = route.getPoints();

            expect(route.gpxDisabled).toBeTruthy();
            expect(points.length).toBeGreaterThan(0)

            // TODO: add tests
    
        });


    });
})
